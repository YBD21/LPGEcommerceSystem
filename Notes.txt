Google App Engine -- check for node hosting ... if its possible 

"proxy": "http://localhost:5000"

Systems :
  
1.Login System  (Client and Backend)
   
   Login Page :
                User can Login in using their phone number and password (min: at least 8 char long)
                
                Remember me (function) : Onclick remember the password and phonenumber (hashed)
                
                set up (npm i js-cookie)


Password lenght must be 8 character long 

Password lenght cannot excide more than 16 character long

Name field lenght at least 2 char long

Attach Firebase Database for login in system :


Admin Pannel : (Basic works)

User Listing : second 

Product CRUD : 

Create Product  --- Done
Edit Gas Price  first 
Edit Product :
Remove Product : here just move the data from productList to RemovedProductList in Realtime Database.  


Front End Product Listing and Product Details.



let createDate = new Date(); 
let timestamp = Date.parse(createDate);
console.log(createDate.toString());
console.log(timestamp);
let dateNow = new Date(timestamp);
console.log(dateNow.toString());

things to look for :
 need something to auto refresh old rate , current rate from server.
 
 io.on('connection', (socket) => {
  fs.watchFile(filePath,async (present,past) =>{
   if (present.mtime !== past.mtime) {
    socket.on('getGasRate', async () => {
    const respond = await readGasRateFile();
    socket.emit('gasRate',respond);
  })
   }
  });

  socket.on('disconnect', () => {
    fs.unwatchFile(filePath);
  });
  // socket.on('getGasRate', async () => {
  //   const respond = await readGasRateFile();
  //   socket.emit('gasRate',respond);
  // })
})


  const test = () => {
    let data = productData;
    let itemCount = Object.keys(productData);
    // console.log("Count", itemCount);
    console.log(data);
    // console.log(typeof(data));
    
    Object.entries(data).map(([key ,value], index) => {
      console.log("Key :",key);
      console.log("ItemCount",index);
      console.log("Product Name :", value.ProductName);
      console.log("Product Qty :", value.InStock);
      console.log("Product Image", value.ImageInfo.Link);
    });
  };


   const addToBasket = () => {
    if (itemCount > 0) {
      dispatch({
        type: "ADD_TO_BASKET",
        item: {
          id: id,
          Image: imageUrl,
          ProductName: productName,
          ProductType: selectedType,
          Price: displayRate,
          Qty: itemCount,
        },
      });
    }
  };

app.get("/getProductList", async (req, res) => {
  let data = req.body;
  const respond = await readProductListfile();
  res.json(respond);
});

  const getProductList = async () => {
    axios
      .get("http://localhost:5000/getProductList")
      .then((respond) => {
        // console.log(respond.data);
        setProductData(respond.data.ProductList);
        setLoader(false);
      })
      .catch((error) => {
        console.log(error.meassage);
      });
  };


 const test = () => {
    if (!productList) {
      return;
    }
      Object.entries(productList).map(([key, value], index) => {
        console.log(key, value, index);<
      });
    //  id={index}
    // productName={data.ProductName}
    // stock={data.InStock}
    // imageUrl={data.ImageInfo.Link}
  };

{
    "idx": "m9pSumjufWqvyuSHhpMQeZ",
    "token": "PE6rqNVGnc3xcEMDjvy4ua",
    "amount": 1000,
    "mobile": "98XXXXX050",
    "product_identity": "1234567890",
    "product_name": "Drogon",
    "product_url": "http://gameofthrones.com/buy/Dragons",
    "widget_id": "khalti-widget-1676968764003"
}

  const newToken = jwt.sign({
    data: 'foobar'
  }, 'secret', { expiresIn: '30' });

  jwt.verify(newToken, 'secret', function(err, decoded) {
    if (err){
      console.log ("Error :",err.message)
    }else {
      console.log(decoded.data) 
    }
  });
  
mailtrap
toaster in react

// const accessToken = req.cookies.userData;
//  console.log(accessToken);

  const [showPopOver, setShowPopOver] = useState(false);

  const handleAddClick = () => {
    setShowPopOver(true);
    setTimeout(() => setShowPopOver(false), 2000);
  };

Add 404 Page Not Found and implemtation in AppRoutes 

Use React.lazy on Admin Page 

SKIP_PREFLIGHT_CHECK=true

Per Charge 100 for Delivery -- Client



need to change item added popover to navBar just like userDropdown


{
  idx: 'vWFGLuqEXLuu7ubhHbvcy5',
  type: { idx: '2jwzDS9wkxbkDFquJqfAEC', name: 'Wallet payment' },
  state: {
    idx: 'DhvMj9hdRufLqkP8ZY4d8g',
    name: 'Completed',
    template: 'is complete'
  },
  amount: 20000,
  fee_amount: 600,
  reference: null,
  refunded: false,
  created_on: '2023-03-16T17:27:09.491722+05:45',
  user: { idx: '', name: 'Santosh Deuja (9860694050)' },
  merchant: {
    idx: 'awp3AVXzAu2V3W2JcY67sQ',
    name: 'Santosh Deuja',
    mobile: 'santosh.deuja2000@gmail.com',
    email: 'santosh.deuja2000@gmail.com'
  },
  remarks: null,
  token: 'XUnEskC3tSJkHPp6deXY55',
  cashback: 0,
  product_identity: '103'
}

  useEffect(() => {
    let interval;

    if (!isPaused) {
      interval = setInterval(() => {
        setRemainingTime((prevTime) => (prevTime > 0 ? prevTime - 1 : 0));
      }, 1000);
    }

    if (remainingTime === 0) {
      close();
    }

    return () => clearInterval(interval);
  }, [remainingTime, isPaused]);


    let remainingTime = 600;
  let interval;
  // map basket and identify product by name
  interval = setInterval(() => {
    remainingTime = remainingTime > 0 ? remainingTime - 1 : 0;
    let minutes = String(Math.floor(remainingTime / 60)).padStart(2, "0");
    let seconds = String(remainingTime % 60).padStart(2, "0");
    console.log(`Time : ${minutes} : ${seconds} `);
  }, 1000);


  const updateProductListQuantity = async (basket, userData) => {
  // 10-minute delay
  await new Promise(resolve => setTimeout(resolve, 10 * 60 * 1000));

  // Get list of product names in basket
  const productNames = basket.map(item => item.productName);

  // Get products from productList that match productNames in basket
  const productsToUpdate = productList.filter(product => productNames.includes(product.productName));

  // Update product quantities based on quantities in basket
  productsToUpdate.forEach(product => {
    const basketItem = basket.find(item => item.productName === product.productName);
    if (basketItem) {
      product.qty -= basketItem.qty;
    }
  });

  // Restore quantities of products that were not purchased
  const unpurchasedProducts = productList.filter(product => !productNames.includes(product.productName));
  unpurchasedProducts.forEach(product => {
    product.qty += product.initialQty - product.qty;
  });
};


const LOCK_TIMEOUT_MS = 10 * 60 * 1000; // 10 minutes in milliseconds

paymentSystemRouter.post("/reserve-stock", async (req, res) => {
  const data = req.body;
  const userId = data.UserInfo.id;
  const basket = data.Basket;

  // Retrieve the current product quantities
  const productList = await getProductList();

  // Check that there is enough stock to reserve
  const canReserve = basket.every(({ productId, quantity }) => {
    const product = productList.find((p) => p.id === productId);
    return product && product.quantity >= quantity;
  });

  if (!canReserve) {
    return res.status(400).json({ message: "Not enough stock available" });
  }

  // Lock the requested amount of each product for the user
  const reservedProducts = basket.map(({ productId, quantity }) => {
    const product = productList.find((p) => p.id === productId);
    const remainingQuantity = product.quantity - quantity;

    // Save the user who reserved the product and the timestamp of the lock
    product.lock = {
      userId,
      timestamp: Date.now() + LOCK_TIMEOUT_MS,
    };

    return {
      id: product.id,
      quantity,
      remainingQuantity,
    };
  });

  // Update the product list in the database
  await updateProductList(productList);

  // Wait for the lock to expire
  await new Promise((resolve) => setTimeout(resolve, LOCK_TIMEOUT_MS));

  // Release the locked products
  reservedProducts.forEach(({ id, quantity, remainingQuantity }) => {
    const product = productList.find((p) => p.id === id);
    product.quantity = remainingQuantity;
    delete product.lock;
  });

  // Update the product list in the database
  await updateProductList(productList);

  // Respond with the updated product list
  const updatedProductList = await getProductList();
  res.json(updatedProductList);
});

async function getProductList() {
  // Retrieve the product list from the database or another source
  // and return it as an array of { id, name, quantity, lock } objects
}

async function updateProductList(productList) {
  // Update the product list in the database or another source
}


