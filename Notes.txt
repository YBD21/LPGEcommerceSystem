Google App Engine -- check for node hosting ... if its possible 

"proxy": "http://localhost:5000"

Systems :
  
1.Login System  (Client and Backend)
   
   Login Page :
                User can Login in using their phone number and password (min: at least 8 char long)
                
                Remember me (function) : Onclick remember the password and phonenumber (hashed)
                
                set up (npm i js-cookie)


Password lenght must be 8 character long 

Password lenght cannot excide more than 16 character long

Name field lenght at least 2 char long

Attach Firebase Database for login in system :


Admin Pannel : (Basic works)

User Listing : second 

Product CRUD : 

Create Product  --- Done
Edit Gas Price  first 
Edit Product :
Remove Product : here just move the data from productList to RemovedProductList in Realtime Database.  


Front End Product Listing and Product Details.



let createDate = new Date(); 
let timestamp = Date.parse(createDate);
console.log(createDate.toString());
console.log(timestamp);
let dateNow = new Date(timestamp);
console.log(dateNow.toString());

things to look for :
 need something to auto refresh old rate , current rate from server.
 
 io.on('connection', (socket) => {
  fs.watchFile(filePath,async (present,past) =>{
   if (present.mtime !== past.mtime) {
    socket.on('getGasRate', async () => {
    const respond = await readGasRateFile();
    socket.emit('gasRate',respond);
  })
   }
  });

  socket.on('disconnect', () => {
    fs.unwatchFile(filePath);
  });
  // socket.on('getGasRate', async () => {
  //   const respond = await readGasRateFile();
  //   socket.emit('gasRate',respond);
  // })
})


  const test = () => {
    let data = productData;
    let itemCount = Object.keys(productData);
    // console.log("Count", itemCount);
    console.log(data);
    // console.log(typeof(data));
    
    Object.entries(data).map(([key ,value], index) => {
      console.log("Key :",key);
      console.log("ItemCount",index);
      console.log("Product Name :", value.ProductName);
      console.log("Product Qty :", value.InStock);
      console.log("Product Image", value.ImageInfo.Link);
    });
  };


   const addToBasket = () => {
    if (itemCount > 0) {
      dispatch({
        type: "ADD_TO_BASKET",
        item: {
          id: id,
          Image: imageUrl,
          ProductName: productName,
          ProductType: selectedType,
          Price: displayRate,
          Qty: itemCount,
        },
      });
    }
  };

app.get("/getProductList", async (req, res) => {
  let data = req.body;
  const respond = await readProductListfile();
  res.json(respond);
});

  const getProductList = async () => {
    axios
      .get("http://localhost:5000/getProductList")
      .then((respond) => {
        // console.log(respond.data);
        setProductData(respond.data.ProductList);
        setLoader(false);
      })
      .catch((error) => {
        console.log(error.meassage);
      });
  };


 const test = () => {
    if (!productList) {
      return;
    }
      Object.entries(productList).map(([key, value], index) => {
        console.log(key, value, index);<
      });
    //  id={index}
    // productName={data.ProductName}
    // stock={data.InStock}
    // imageUrl={data.ImageInfo.Link}
  };

{
    "idx": "m9pSumjufWqvyuSHhpMQeZ",
    "token": "PE6rqNVGnc3xcEMDjvy4ua",
    "amount": 1000,
    "mobile": "98XXXXX050",
    "product_identity": "1234567890",
    "product_name": "Drogon",
    "product_url": "http://gameofthrones.com/buy/Dragons",
    "widget_id": "khalti-widget-1676968764003"
}


let config = {
    // replace this key with yours
    publicKey: "test_public_key_0fefe32ff9084ffbb30e4e3277ed0bc4",
    productIdentity: "1234567890",
    productName: "Everest",
    productUrl: "http://localhost:3000/Checkout",
    eventHandler: {
      onSuccess(payload) {
        // hit merchant api for initiating verfication
        console.log(payload);
      },
      // onError handler is optional
      onError(error) {
        // handle errors
        console.log(error);
      },
      onClose() {
        // console.log('widget is closing');
      },
    },
    paymentPreference: [
      "KHALTI",
      "EBANKING",
      "MOBILE_BANKING",
      "CONNECT_IPS",
      "SCT",
    ],
  };

  let checkout = new KhaltiCheckout(config);

  const payment = () => {
    checkout.show({ amount: totalCharge * 100 });
  };

  const newToken = jwt.sign({
    data: 'foobar'
  }, 'secret', { expiresIn: '30' });

  jwt.verify(newToken, 'secret', function(err, decoded) {
    if (err){
      console.log ("Error :",err.message)
    }else {
      console.log(decoded.data) 
    }
  });
  
mailtrap
toaster in react

// const accessToken = req.cookies.userData;
//  console.log(accessToken);

Add 404 Page Not Found and implemtation in AppRoutes 

Use React.lazy on Admin Page 

SKIP_PREFLIGHT_CHECK=true

Per Charge 100 for Delivery -- Client
